// Package models contains the types for schema ''.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"

	"github.com/xo/xoutil"
)

// Identity represents a row from 'identities'.
type Identity struct {
	ID        int           `json:"id"`         // id
	Name      string        `json:"name"`       // name
	CreatedAt xoutil.SqTime `json:"created_at"` // created_at
	PublicKey []byte        `json:"public_key"` // public_key

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Identity exists in the database.
func (i *Identity) Exists() bool {
	return i._exists
}

// Deleted provides information if the Identity has been deleted from the database.
func (i *Identity) Deleted() bool {
	return i._deleted
}

// Insert inserts the Identity to the database.
func (i *Identity) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if i._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO identities (` +
		`name, created_at, public_key` +
		`) VALUES (` +
		`?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, i.Name, i.CreatedAt, i.PublicKey)
	res, err := db.Exec(sqlstr, i.Name, i.CreatedAt, i.PublicKey)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	i.ID = int(id)
	i._exists = true

	return nil
}

// Update updates the Identity in the database.
func (i *Identity) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !i._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if i._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE identities SET ` +
		`name = ?, created_at = ?, public_key = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, i.Name, i.CreatedAt, i.PublicKey, i.ID)
	_, err = db.Exec(sqlstr, i.Name, i.CreatedAt, i.PublicKey, i.ID)
	return err
}

// Save saves the Identity to the database.
func (i *Identity) Save(db XODB) error {
	if i.Exists() {
		return i.Update(db)
	}

	return i.Insert(db)
}

// Delete deletes the Identity from the database.
func (i *Identity) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !i._exists {
		return nil
	}

	// if deleted, bail
	if i._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM identities WHERE id = ?`

	// run query
	XOLog(sqlstr, i.ID)
	_, err = db.Exec(sqlstr, i.ID)
	if err != nil {
		return err
	}

	// set deleted
	i._deleted = true

	return nil
}

// IdentityByID retrieves a row from 'identities' as a Identity.
//
// Generated from index 'identities_id_pkey'.
func IdentityByID(db XODB, id int) (*Identity, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, created_at, public_key ` +
		`FROM identities ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	i := Identity{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&i.ID, &i.Name, &i.CreatedAt, &i.PublicKey)
	if err != nil {
		return nil, err
	}

	return &i, nil
}
