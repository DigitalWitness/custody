// Package models contains the types for schema ''.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"

	"github.com/xo/xoutil"
)

// Ledger represents a row from 'ledger'.
type Ledger struct {
	ID        int           `json:"id"`         // id
	CreatedAt xoutil.SqTime `json:"created_at"` // created_at
	Identity  int           `json:"identity"`   // identity
	Message   string        `json:"message"`    // message
	Hash      []byte        `json:"hash"`       // hash

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Ledger exists in the database.
func (l *Ledger) Exists() bool {
	return l._exists
}

// Deleted provides information if the Ledger has been deleted from the database.
func (l *Ledger) Deleted() bool {
	return l._deleted
}

// Insert inserts the Ledger to the database.
func (l *Ledger) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if l._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO ledger (` +
		`created_at, identity, message, hash` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, l.CreatedAt, l.Identity, l.Message, l.Hash)
	res, err := db.Exec(sqlstr, l.CreatedAt, l.Identity, l.Message, l.Hash)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	l.ID = int(id)
	l._exists = true

	return nil
}

// Update updates the Ledger in the database.
func (l *Ledger) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !l._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if l._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE ledger SET ` +
		`created_at = ?, identity = ?, message = ?, hash = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, l.CreatedAt, l.Identity, l.Message, l.Hash, l.ID)
	_, err = db.Exec(sqlstr, l.CreatedAt, l.Identity, l.Message, l.Hash, l.ID)
	return err
}

// Save saves the Ledger to the database.
func (l *Ledger) Save(db XODB) error {
	if l.Exists() {
		return l.Update(db)
	}

	return l.Insert(db)
}

// Delete deletes the Ledger from the database.
func (l *Ledger) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !l._exists {
		return nil
	}

	// if deleted, bail
	if l._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM ledger WHERE id = ?`

	// run query
	XOLog(sqlstr, l.ID)
	_, err = db.Exec(sqlstr, l.ID)
	if err != nil {
		return err
	}

	// set deleted
	l._deleted = true

	return nil
}

// IdentityByIdentity returns the Identity associated with the Ledger's Identity (identity).
//
// Generated from foreign key 'ledger_identity_fkey'.
func (l *Ledger) IdentityByIdentity(db XODB) (*Identity, error) {
	return IdentityByID(db, l.Identity)
}

// LedgerByID retrieves a row from 'ledger' as a Ledger.
//
// Generated from index 'ledger_id_pkey'.
func LedgerByID(db XODB, id int) (*Ledger, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, created_at, identity, message, hash ` +
		`FROM ledger ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	l := Ledger{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&l.ID, &l.CreatedAt, &l.Identity, &l.Message, &l.Hash)
	if err != nil {
		return nil, err
	}

	return &l, nil
}
